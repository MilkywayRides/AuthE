generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole             @default(USER)
  resetToken          String?
  resetTokenExpiry    DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  coin                Int                  @default(0)
  lastIpAddress       String?
  accounts            Account[]
  devices             Device[]
  passwordResetTokens PasswordResetToken[]
  projects            Project[]
  uploadedFiles       ProjectFile[]
  sessions            Session[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  userAgent    String?
  deviceId     String?
  device       Device?  @relation(fields: [deviceId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
}

model Device {
  id          String    @id @default(cuid())
  userId      String
  ipAddress   String
  userAgent   String
  lastLoginAt DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions    Session[]

  @@unique([userId, userAgent])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  files       ProjectFile[]
  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model ProjectFile {
  id          String   @id @default(cuid())
  name        String
  url         String
  size        Int
  type        String
  uploadedAt  DateTime @default(now())
  uploadedById String
  uploadedBy  User     @relation(fields: [uploadedById], references: [id])
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}
